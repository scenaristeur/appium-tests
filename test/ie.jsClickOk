import wd from 'wd';
import chai from 'chai';
import chaiAsPromised from 'chai-as-promised';
// import { startServer } from 'appium-windows-driver/lib/server.js';
// import { isAdmin } from 'appium-windows-driver/lib/installer.js';
// import { /*driver,*/ By2, /* windowsAppDriverCapabilities*/ } from 'selenium-appium'

chai.should();
chai.use(chaiAsPromised);

const TEST_PORT = 4723//4788;
const TEST_HOST = 'localhost';

// async function getCalculatorResultText() {
//   const text = await By2.nativeAccessibilityId('CalculatorResults').getText();
//   return text.replace('Display is', '').trim();
// }


describe('ie se lance', async function () {
  this.timeout(50000)
  // if (!await isAdmin()) {
  //   return;
  // }

  // let server;
  let driver;

  before(async function () {
    // server = await startServer(TEST_PORT, TEST_HOST);
    // console.log("server ok", server)
  });

  // after(async function () {
  //   if (server) {
  //     await server.close();
  //   }
  //   server = null;
  // });

  beforeEach(function () {
    // if (server) {
      driver = wd.promiseChainRemote(TEST_HOST, TEST_PORT);
    // }
  });

  afterEach(async function () {
  //  console.log("afterEach")
    if (driver) {
      await driver.quit();
    }
    driver = null;
  });

  it('should run a basic session using a real client', async function () {
    await driver.init({
      app: "C:\\Program Files\\Internet Explorer\\iexplore.exe",
      platformName: 'Windows',
    });
  //  console.log(driver)
//    await driver.source().should.eventually.be.not.empty;
let source = await driver.source()
console.log("source", source)

// let elements = await driver.element()
// it('Addition', async () => {
  // Find the buttons by their names and click them in sequence to perform 1 + 7 = 8
  //"/Pane[@ClassName=\"#32769\"][@Name=\"Bureau 1\"]/Window[@ClassName=\"ApplicationFrameWindow\"][@Name=\"Calculatrice\"]/Window[@ClassName=\"Windows.UI.Core.CoreWindow\"][@Name=\"Calculatrice\"]/Group[@ClassName=\"LandmarkTarget\"]/Group[@Name=\"Pavé numérique\"][@AutomationId=\"NumberPad\"]/Button[@Name=\"Sept\"][@AutomationId=\"num7Button\"]"

//  await driver.elementByAccessibilityId("num7Button").click()
//  await driver.elementByAccessibilityId("num9Button").click()
//  await driver.elementByAccessibilityId("num9Button").click()
//  await driver.elementByAccessibilityId("multiplyButton").click()
//  await driver.elementByAccessibilityId("num4Button").click()
//  await driver.elementByAccessibilityId("num5Button").click()
//  await driver.elementByAccessibilityId("num9Button").click()
//  await driver.elementByAccessibilityId("equalButton").click()
// await driver.sleep(3000)
//  await driver.elementByAccessibilityId("clearEntryButton").click()


let elements = await driver.elements("xpath",'//*')
await driver.sleep(1000)
 console.log(elements.length , " elements")
console.log("use FOR await")
 let indice = 0
for await (const e of elements){
  let el ={}
  el.tagName = await e.getTagName()
  el.text = await e.text()
   el.name = await e.getAttribute("name")
   el.id = await e.getAttribute("id")
   el.href = await e.getAttribute("href")
   el.string = await e.toString()
   el.json = await e.toJSON()
   el.placeholder = await e.getAttribute("placeholder")
  // let attrs = await driver.safeExecuteAsync("return arguments[0].attributes", e)

  //console.log(s)
  //console.log(indice, el.text, )
    try {
      //await el.sendKeys(indice)
      await e.click()
console.log("-----------------",indice, el.text, " ok")
    }
    catch(e){
      console.log(indice, el.text, " not", e)
    }

    indice ++
  // if (el.text == "Nouvel Onglet"){
  //   console.log("NOUVEAU")
  //   await el.click()
  // }
//    if(el.text == "Entrez votre terme de recherche"){
//      await el.type("hello world!")
// // await element.type(Key.Enter)
// console.log("saisie ok")
//      await driver.sleep(1000)
//    }
}
   console.log(elements.length , " elements")



await driver.sleep(3000)



  // await By2.nativeName('One').click();
  // await By2.nativeName('Plus').click();
  // await By2.nativeName('Seven').click();
  // await By2.nativeName('Equals').click();
  // expect(await getCalculatorResultText()).toBe('8');
// });

  });
});
